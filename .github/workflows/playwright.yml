name: Playwright Cucumber Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to run tests on'
        required: true
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
      tags:
        description: 'Test tags to run (e.g. @smoke, @form)'
        required: false
        default: ''
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    
    - name: Install Allure commandline
      run: npm install -g allure-commandline
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Clean and create allure-results directory
      run: |
        # Remove any existing results and reports
        rm -rf allure-results
        rm -rf allure-report
        
        # Create fresh directory
        mkdir -p allure-results
        
        # Add a marker file to verify directory creation
        echo "Created at $(date)" > allure-results/init-marker.txt
        
        echo "Cleaned allure-results directory and created marker file"
        ls -la allure-results
    
    - name: Run Form Tests
      id: form_tests
      run: |
        echo "Running form tests..."
        node_modules/.bin/cucumber-js --require-module ts-node/register --require features/support/**/*.ts --require features/step_definitions/**/*.ts --format @cucumber/pretty-formatter --format ./features/support/allure.setup.js --tags @form
      continue-on-error: true
    
    - name: Run Smoke Tests
      id: smoke_tests
      run: |
        echo "Running smoke tests..."
        node_modules/.bin/cucumber-js --require-module ts-node/register --require features/support/**/*.ts --require features/step_definitions/**/*.ts --format @cucumber/pretty-formatter --format ./features/support/allure.setup.js --tags @smoke
      continue-on-error: true
      
    - name: Run Tests with Tags (if specified)
      id: tag_tests
      if: github.event.inputs.tags != ''
      run: |
        echo "Running tests with tags: ${{ github.event.inputs.tags }}"
        node_modules/.bin/cucumber-js --require-module ts-node/register --require features/support/**/*.ts --require features/step_definitions/**/*.ts --format @cucumber/pretty-formatter --format ./features/support/allure.setup.js --tags "${{ github.event.inputs.tags }}"
      continue-on-error: true
    
    - name: List allure-results contents 
      run: ls -la allure-results
      
    - name: Check if tests generated results
      id: check_results
      run: |
        # Count json results files (not other files like environment.properties)
        RESULT_COUNT=$(find allure-results -name "*-result.json" | wc -l)
        echo "Found $RESULT_COUNT result files"
        
        if [ "$RESULT_COUNT" -gt 0 ]; then
          echo "Tests generated results successfully."
          echo "result_count=$RESULT_COUNT" >> $GITHUB_OUTPUT
          exit 0
        else
          echo "No test result files found! Tests may have failed to run properly."
          echo "result_count=0" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Generate Allure Report
      run: |
        echo "Generating Allure report..."
        # Verify allure-results directory exists and has content
        if [ ! -d "allure-results" ] || [ -z "$(ls -A allure-results)" ]; then
          echo "ERROR: allure-results directory is empty or missing"
          mkdir -p allure-results
          echo "Test execution failed to generate results" > allure-results/execution-failed.txt
        fi
        
        # Generate the report
        allure generate allure-results --clean -o allure-report
        
        # Verify the report was generated successfully
        if [ ! -d "allure-report" ] || [ ! -d "allure-report/data" ]; then
          echo "ERROR: Allure report generation failed"
          mkdir -p allure-report/data
          echo "<html><body><h1>Report generation failed</h1></body></html>" > allure-report/index.html
          echo '{"reportName":"Failed Report","testRuns":[]}' > allure-report/data/report.json
        fi
      
    - name: List generated report files
      run: |
        echo "Allure report contents:"
        ls -la allure-report
        echo "Data directory contents:"
        ls -la allure-report/data || echo "No data directory found"
    
    - name: Upload Allure Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-report
        path: allure-report/
        retention-days: 30
    
    - name: Upload Allure Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results
        path: allure-results/
        retention-days: 30
    
    - name: Upload Test Screenshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-screenshots
        path: allure-results/*.png
        retention-days: 7

  publish-report:
    name: Publish Allure Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Download Allure Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Check for empty or invalid report
        run: |
          echo "Verifying Allure report content..."
          
          # Check if the report data directory exists and has content
          if [ ! -d "allure-report/data" ] || [ -z "$(ls -A allure-report/data 2>/dev/null)" ]; then
            echo "WARNING: Empty or invalid Allure report detected"
            
            # Create a basic structure to prevent deployment failure
            mkdir -p allure-report/data
            
            # Create a placeholder report.json
            echo '{
              "reportName": "Allure Report - No Test Results",
              "testRuns": [],
              "statistic": {"failed": 0, "broken": 0, "skipped": 0, "passed": 0, "unknown": 0, "total": 0},
              "time": {"start": '$(date +%s%3N)', "stop": '$(date +%s%3N)', "duration": 0}
            }' > allure-report/data/report.json
            
            # Create a readme explaining the issue
            echo '<!DOCTYPE html>
            <html>
            <head>
                <title>No Test Results Available</title>
                <style>
                    body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                    .error-box { background-color: #fff3cd; border: 1px solid #ffeeba; padding: 20px; border-radius: 5px; }
                    h1 { color: #856404; }
                </style>
            </head>
            <body>
                <div class="error-box">
                    <h1>No Test Results Available</h1>
                    <p>The workflow did not generate any test results, or the report generation failed.</p>
                    <p>Please check the workflow logs for more information.</p>
                </div>
            </body>
            </html>' > allure-report/index.html
          else
            echo "Valid Allure report data found. Proceeding with deployment."
            ls -la allure-report/data
          fi

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: allure-report
          clean: true # This will clean previous files on the gh-pages branch
          clean-exclude: |
            .git
            .github
          token: ${{ github.token }}
          commit-message: "Publish Allure Report from workflow run ${{ github.run_number }}"
